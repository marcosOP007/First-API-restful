<!DOCTYPE html>
<html lang="en"> 
<head>
    <title>Portal - Bootstrap 5 Admin Dashboard Template For Developers</title>
    
    <!-- Meta -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <meta name="description" content="Portal - Bootstrap 5 Admin Dashboard Template For Developers">
    <meta name="author" content="Xiaoying Riley at 3rd Wave Media">    
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    
    <!-- FontAwesome JS-->
    <script defer src="/assets/plugins/fontawesome/js/all.min.js"></script>
    
    <!-- App CSS -->  
    <link id="theme-style" rel="stylesheet" href="/assets/css/portal.css">

</head> 

<body class="app">
	<%-include ('nav.ejs')%>
    <div class="app-wrapper">
	    
	    <div class="app-content pt-3 p-md-3 p-lg-4">
			
		    <div class="container-xl">
			    
			    <h1 class="app-page-title">Charts</h1>
				
			    <div class="app-card shadow-sm mb-4 border-left-decoration" ></div><!--//app-card-->
				
			    <div class="row g-4 mb-4">
					<%for(i = 0; i < dadosSensores.length; i++){%>	
			        <div class="col-12 col-lg-6">
						
					    <div class="app-card app-card-chart h-100 shadow-sm">


					        <div class="app-card-header p-3 border-0">
						        <h4 class="app-card-title">Sensor <%-`${dadosSensores[i].id}`%></h4>
					        </div><!--//app-card-header-->


					        <div class="app-card-body p-4">		
										   
						        <div class="chart-container" id="<%-`chart-container-${dadosSensores[i].id}`%>"></div>
								
					        </div><!--//app-card-body-->
				        </div><!--//app-card-->
						
			        </div><!--//col-->
					<%}%>
					
			    </div><!--//row-->
				
		    </div><!--//container-fluid-->
			
	    </div><!--//app-content-->
	    
	    <footer class="app-footer">
		    <div class="container text-center py-3">
		         <!--/* This template is free as long as you keep the footer attribution link. If you'd like to use the template without the attribution link, you can buy the commercial license via our website: themes.3rdwavemedia.com Thank you for your support. :) */-->
            <small class="copyright">Designed with <span class="sr-only">love</span> by <a class="app-link" href="http://themes.3rdwavemedia.com" target="_blank">Xiaoying Riley</a> for developers</small>
		       
		    </div>
	    </footer><!--//app-footer-->
	    
    </div><!--//app-wrapper-->    					

 
    <!-- Javascript -->          
    <script src="/assets/plugins/popper.min.js"></script>
    <script src="/assets/plugins/bootstrap/js/bootstrap.min.js"></script>  

    
    <!-- Charts JS -->    


    <!-- Page Specific JS -->
    <script src="/assets/js/app.js"></script> 

	<script>
	var teste = JSON.parse('<%-JSON.stringify(dadosSensores)%>')

	async function createChartInHTML(sensorid) {
		const divChart = document.createElement('canvas');
		divChart.setAttribute("id", `chart-line-${sensorid}`);
		const divChartHTML = document.getElementById(`chart-container-${sensorid}`);
		divChartHTML.appendChild(divChart);
	}

	async function updateChart(sensor_id, chart) {
		var getDetails = await getLogDetails(sensor_id);
		for (i = chart.data.datasets[0].data.length; i < getDetails[0].length; i++) {
			addData(getDetails[0][i], getDetails[1][i], chart)
		}
	}


	function addData(temp, hor_temp, chart) {
		let sizeData = chart.data.datasets[0].data.length
		chart.data.datasets[0].data[sizeData] = temp
		chart.data.labels[sizeData] = `${(hor_temp)}`
		chart.update()
	}


	async function createGráficoTeste(id) {
		

		const ctx = document.getElementById(`chart-line-${id}`);
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				labels: await (getLogDetails(id))[1],
				datasets: [{
					tension: 0.3,
					fill: 'origin',
					label: 'Temperatura °C',
					borderColor: '#04A0A5',
					hitRadius: 200,
					backgroundColor: (context) => {
						const bgColor = [
							'#fa501d',
							'#fff4c7',
							'#fabf3d',
							'#8adafa'
					];
						if(!context.chart.chartArea){
							return;
						}
						console.log(context.chart.chartArea)
						const {ctx, data, chartArea: {top, bottom} } = context.chart;
						const gradientBg = ctx.createLinearGradient(0, top, 0, bottom);
						gradientBg.addColorStop(0, bgColor[0])
						gradientBg.addColorStop(0.75, bgColor[2])
						gradientBg.addColorStop(0.95, bgColor[1])
						gradientBg.addColorStop(1, bgColor[3])
						return gradientBg
					},

					data: await (getLogDetails(id))[0],
					borderWidth: 4
				}]
			},
			options: {
				responsive: true,
				scales: {
					y: {
						beginAtZero: false
					}
				}
			}
			
		});
		updateChart(id, chart);
		setInterval(updateChart, 5000, id, chart);
	}



	async function loadChannelDetails() {
		const sensor = teste;
		sensor.forEach(sensor => {
			//getLogDetails(sensor.id);
			createChartInHTML(sensor.id)
			createGráficoTeste(sensor.id)
		});

	}


	function extractDateTimeComponents(dateTime) {
		const [datePart, timePart] = dateTime.split("T");
		const dateComponents = datePart.split("-");
		const year = dateComponents[0];
		const month = dateComponents[1];
		const day = dateComponents[2];

		const timeComponents = timePart.split(":");
		const hours = timeComponents[0];
		const minutes = timeComponents[1];
		const seconds = timeComponents[2].split(".")[0];

		const dataNow = new Date();
		if (dataNow.getFullYear() != year) return `${day}/${month}/${year}`;
		else if (dataNow.getMonth() != month) return `${day}/${month} - ${hours}:${minutes}`;
		else if (dataNow.getDate() != day) return `${day}/${month} - ${hours}:${minutes}`;
		else return `${hours}:${minutes}:${seconds}`;

	}



	async function getLogDetails(id) {
		const response2 = await fetch(`http://localhost:3000/api/sensors/${id}/temperature-logs`);
		const logs = await response2.json();
		var teste = [];
		var teste2 = [];
		var i = 0
		console.log(logs)
		logs.forEach(log => {
			teste.push(log.temperature);
			teste2.push(`${extractDateTimeComponents(log.created_at)}`)
		});
		return [teste, teste2];
	}

	loadChannelDetails();
</script>

</body>
</html> 

